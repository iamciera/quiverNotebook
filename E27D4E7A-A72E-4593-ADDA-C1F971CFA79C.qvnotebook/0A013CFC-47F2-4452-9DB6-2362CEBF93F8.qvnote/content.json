{
  "title": "Analysis1a_Top RedFly_retrieve sequences",
  "cells": [
    {
      "type": "markdown",
      "data": "## Analysis redFly test\n\n- Create Bed, script `kvonDataToBED.r`\n- LiftOver \n\nPlease run command in directory with chain files\n\n    for filename in *chain; do ~/genomicsTools/liftOver/liftOver -minMatch=0.1 -multiple ../../pipeline_output_1/1.kvon_redfly_BED4.bed $filename ../../pipeline_output_1/2.liftOver/output.$filename.bed ../../pipeline_output_1/2.liftOver/unlifted.$filename.bed; done\n\nIn order to check the number of lifted in each use `wc -l *bed`\n\nBasically do this will all samples except D. auraria(Sample_MEMB003E_index16), D. triauraria (Sample_MEMB002B_index6), and D. leontia (Sample_MEMB003A_index2). \n\n- Now need to add species name to the file. I will do this in shell. \n\nIn linux:\n `for f in output*; do sed -i 's/$/\\t$f/' $f; done`\n \nOn mac:\n\n  `for file in output*; do awk 'BEGIN{OFS=\"\\t\"}{print $0, FILENAME}' $file > fixed.$file; done`\n\nWhich appends the file name to a new column in every output file. You can do the same with output to unlifted replace `output*` with `*unlifted*`.  In the mac version you write a new file, you cannot seem to write over file. \n\n- concatenate into one file for each file type: `cat fixed.output.Dmel_to_MEMB00* > 2a.liftover_output_ALL.bed`. To check `wc -l *ALL.bed`\n\n- clean up bedfile name.  `2.cleanLiftOverOutputBedfile.R` In R. Make sure you change the file \n\n- Run fastaFromBED indirectory with assemblies\n\n    `for filename in *.fa; do ~/genomicsTools/bedtools2/bin/fastaFromBed -fi $filename -bed ../../pipeline_output/2.liftOver/2b.outputForFastaFromBED.bed -fo ../../pipeline_output/3.fasta_creation/fastaFromBED_output_$filename -name; done`\n    \n- Then concatenate:`cat fastaFromBED_output_MEMB00* > 3.fastaFromBED_ALL.fa`\n    to check: `grep -c \"^>\" 3a.fastaFromBed_ALL.fa`\n    to check in full directory: `grep -rc \"^>\" *`\n\n\n**Subset fasta file by presence of + or - in header**\n\nfor plus \n\n`cat 3a.fastaFromBed_ALL.fa | bioawk -cfastx ' $name ~ /'\\\\+'/ { print \">\" $name \"\\n\" $seq }' >> plus.fa`\n\nfor minus \n\n`cat 3a.fastaFromBed_ALL.fa | bioawk -cfastx ' $name ~ /\\|\\-/ { print \">\" $name \"\\n\" $seq }' >> minus.fa`\n\nReverse Complement\n\n  `~/genomicsTools/seqtk/seqtk seq -r minus.fa > reversed_minus.fa`\n\nconcatenate\n\n`cat reversed_minus.fa plus.fa > 3b.fastaFromBED_ALL.fa`\n\n11. Now I need to be able to filter all enhancers of a particular type into their own file. \n\nInstall Bioawk:\n\n[Bioawk](https://github.com/lh3/bioawk) appeared to be a good solution. I used [Vince's Bioawk tutorial](https://github.com/vsbuffalo/bioawk-tutorial) to install: `git clone git://github.com/lh3/bioawk.git && cd bioawk && make && sudo cp bioawk /usr/local/bin/`\n\nStep 10A: Gets list of unique enhancerNames\n\n`cat 3.fastaFromBed_ALL.fa | bioawk -c fastx ' $name  { print $name }' | grep -o '^[^|]*' | sed '/^\\s*$/d' | sort | uniq > enhancerNames`\n\nStep 10B: Extract enhancer sequences based on enhancer names\n\n`while read line; do cat 3.fastaFromBed_ALL.fa | bioawk -cfastx ' $name ~ /'$line'/ { print \">\" $name \"\\n\" $seq }' >> ../4.enhancer_alignment/$line.fa; done < enhancerNames`\n\n\n\n\n\n\n"
    }
  ]
}